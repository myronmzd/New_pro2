[0m[1mmodule.lambda.data.aws_iam_policy_document.lambda_assume_role: Reading...[0m[0m
[0m[1mmodule.events_sns.data.aws_iam_policy_document.events_assume_role: Reading...[0m[0m
[0m[1mmodule.events_sns.data.aws_iam_policy_document.events_assume_role: Read complete after 0s [id=3959961479][0m
[0m[1mmodule.lambda.data.aws_iam_policy_document.lambda_assume_role: Read complete after 0s [id=2690255455][0m
[0m[1mmodule.stepfunctions.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.stepfunctions.data.aws_iam_policy_document.sfn_assume_role: Reading...[0m[0m
[0m[1mmodule.stepfunctions.data.aws_iam_policy_document.sfn_policy: Reading...[0m[0m
[0m[1mmodule.stepfunctions.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.stepfunctions.data.aws_iam_policy_document.sfn_assume_role: Read complete after 0s [id=4022981484][0m
[0m[1mmodule.stepfunctions.data.aws_region.current: Read complete after 0s [id=ap-south-1][0m
[0m[1mmodule.stepfunctions.data.aws_iam_policy_document.sfn_policy: Read complete after 0s [id=950640121][0m
[0m[1mmodule.stepfunctions.data.aws_caller_identity.current: Read complete after 0s [id=236024603923][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.events_sns.aws_cloudwatch_event_rule.s3_object_created[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "s3_object_created" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = (known after apply)
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "s3-object-created"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m tags_all       = (known after apply)
    }

[1m  # module.events_sns.aws_cloudwatch_event_target.stepfunction[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "stepfunction" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m role_arn       = (known after apply)
      [32m+[0m[0m rule           = "s3-object-created"
      [32m+[0m[0m target_id      = (known after apply)
    }

[1m  # module.events_sns.aws_iam_role.events[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "events" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "events.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "events_invoke_stepfunctions"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.events_sns.aws_sns_topic.file_processing_topic[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "file_processing_topic" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_throughput_scope       = (known after apply)
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "file-processing-topic"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.events_sns.aws_sns_topic_subscription.email_subscription[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic_subscription" "email_subscription" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m confirmation_timeout_in_minutes = 1
      [32m+[0m[0m confirmation_was_authenticated  = (known after apply)
      [32m+[0m[0m endpoint                        = "myronmzd22@gmail.com"
      [32m+[0m[0m endpoint_auto_confirms          = false
      [32m+[0m[0m filter_policy_scope             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m pending_confirmation            = (known after apply)
      [32m+[0m[0m protocol                        = "email"
      [32m+[0m[0m raw_message_delivery            = false
      [32m+[0m[0m topic_arn                       = (known after apply)
    }

[1m  # module.lambda.archive_file.app1[0m will be created
[0m  [32m+[0m[0m resource "archive_file" "app1" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m output_base64sha256 = (known after apply)
      [32m+[0m[0m output_base64sha512 = (known after apply)
      [32m+[0m[0m output_md5          = (known after apply)
      [32m+[0m[0m output_path         = "modules/lambda/app1.zip"
      [32m+[0m[0m output_sha          = (known after apply)
      [32m+[0m[0m output_sha256       = (known after apply)
      [32m+[0m[0m output_sha512       = (known after apply)
      [32m+[0m[0m output_size         = (known after apply)
      [32m+[0m[0m source_file         = "/workspaces/New_pro2/app1.py"
      [32m+[0m[0m type                = "zip"
    }

[1m  # module.lambda.aws_iam_policy.lambda_exec_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_exec_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "lambda_exec_policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.lambda.aws_iam_role.lambda_exec[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_exec" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "lambda_exec_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.lambda.aws_lambda_function.funtion[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "funtion" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/lambda/app1.zip"
      [32m+[0m[0m function_name                  = "CarCrashApp"
      [32m+[0m[0m handler                        = "app.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.8"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "Project"     = "CarCrashApp"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "Production"
          [32m+[0m[0m "Project"     = "CarCrashApp"
        }
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)
    }

[1m  # module.s3.aws_iam_policy.s3_dump_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "s3_dump_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Policy for accessing dump S3 bucket"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "s3_dump_policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.s3.aws_iam_policy.s3_raw_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "s3_raw_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Policy for accessing raw S3 bucket"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "s3_raw_policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.s3.aws_iam_role.s3_dump_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "s3_dump_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "lambda.amazonaws.com",
                              [32m+[0m[0m "states.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "s3_dump_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.s3.aws_iam_role.s3_raw_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "s3_raw_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "s3_raw_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.s3.aws_iam_role_policy_attachment.s3_dump_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "s3_dump_role_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "s3_dump_role"
    }

[1m  # module.s3.aws_iam_role_policy_attachment.s3_raw_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "s3_raw_role_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "s3_raw_role"
    }

[1m  # module.s3.aws_s3_bucket.dump_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "dump_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3.aws_s3_bucket.raw[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "raw" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3.aws_s3_bucket_public_access_block.dump[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "dump" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.s3.aws_s3_bucket_public_access_block.raw[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "raw" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.s3.random_string.suffix[0m will be created
[0m  [32m+[0m[0m resource "random_string" "suffix" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 8
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (known after apply)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = false
    }

[1m  # module.stepfunctions.aws_cloudwatch_log_group.sfn_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "sfn_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/stepfunctions/video-crash-detection"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # module.stepfunctions.aws_iam_role.sfn_exec[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "sfn_exec" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "states.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "stepfunctions_exec_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.stepfunctions.aws_iam_role_policy.sfn_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "sfn_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "stepfunctions_policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "lambda:InvokeFunction",
                          [32m+[0m[0m "lambda:InvokeAsync",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "rekognition:DetectCustomLabels"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.stepfunctions.aws_sfn_state_machine.video_crash_detection[0m will be created
[0m  [32m+[0m[0m resource "aws_sfn_state_machine" "video_crash_detection" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m creation_date             = (known after apply)
      [32m+[0m[0m definition                = jsonencode(
            {
              [32m+[0m[0m Comment = "Offline video crash detection: single Lambda does split → Rekognition → alert → cleanup"
              [32m+[0m[0m StartAt = "ProcessVideo"
              [32m+[0m[0m States  = {
                  [32m+[0m[0m ProcessVideo = {
                      [32m+[0m[0m End        = true
                      [32m+[0m[0m OutputPath = "$.Payload"
                      [32m+[0m[0m Parameters = {
                          [32m+[0m[0m FunctionName = "arn:aws:lambda:ap-south-1:236024603923:function:process-video"
                          [32m+[0m[0m Payload      = {
                              [32m+[0m[0m "dump_bucket.$"  = "$.dump_bucket"
                              [32m+[0m[0m "video_bucket.$" = "$.bucket"
                              [32m+[0m[0m "video_key.$"    = "$.key"
                            }
                        }
                      [32m+[0m[0m Resource   = "arn:aws:states:::lambda:invoke"
                      [32m+[0m[0m Type       = "Task"
                    }
                }
              [32m+[0m[0m Version = "1.0"
            }
        )
      [32m+[0m[0m description               = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m name                      = "video-crash-detection"
      [32m+[0m[0m name_prefix               = (known after apply)
      [32m+[0m[0m publish                   = false
      [32m+[0m[0m revision_id               = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m state_machine_version_arn = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags_all                  = (known after apply)
      [32m+[0m[0m type                      = "STANDARD"
      [32m+[0m[0m version_description       = (known after apply)

      [32m+[0m[0m encryption_configuration (known after apply)

      [32m+[0m[0m logging_configuration {
          [32m+[0m[0m include_execution_data = true
          [32m+[0m[0m level                  = "ALL"
          [32m+[0m[0m log_destination        = (known after apply)
        }

      [32m+[0m[0m tracing_configuration (known after apply)
    }

[1mPlan:[0m 24 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
