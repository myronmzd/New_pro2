{
  "Comment": "Video analysis step function",
  "StartAt": "CheckBucketContents",
  "States": {
    "CheckBucketContents": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket.$": "$.input_bucket",
        "Prefix": "raw/",
        "MaxKeys": 1
      },
      "ResultPath": "$.s3ListResult",
      "Next": "Choice1"
    },
    "Choice1": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.input_key",
          "StringMatches": "*.mp4",
          "Next": "ECS_RunTask_LambdaSplitVideo"
        }
      ],
      "Default": "FailVideo"
    },
    "FailVideo": {
      "Type": "Fail",
      "Error": "NotVideoFormat",
      "Cause": "Only .mp4 allowed"
    },
    "ECS_RunTask_LambdaSplitVideo": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster": "${ecs_cluster}",
        "TaskDefinition": "${video_splitter_arn_1}",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": ${jsonencode(fargateSUB)},
            "SecurityGroups": ${jsonencode(fargateSG)},
            "AssignPublicIp": "ENABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [{
            "Name": "video-processor",
            "Environment": [
              {
                "Name": "S3_BUCKET_R",
                "Value": "${raw_path_url}"
              },
              {
                "Name": "S3_BUCKET_D",
                "Value": "${processing_path_url}"
              }
            ]
          }]
        }
      },
      "ResultPath": "$.ecsTaskResult",
      "Next": "CheckProcessingImages"
    },
    "CheckProcessingImages": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket.$": "$.dump_bucket",
        "Prefix": "processing/"
      },
      "ResultPath": "$.processingResult",
      "Next": "Choice2"
    },
    "Choice2": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.processingResult.KeyCount",
          "NumericGreaterThan": 0,
          "Next": "ECS_RunTask_CrashDetection"
        }
      ],
      "Default": "FailProcessing"
    },
    "FailProcessing": {
      "Type": "Fail",
      "Error": "NoProcessingImages",
      "Cause": "No files in /processing/"
    },
    "ECS_RunTask_CrashDetection": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster": "${ecs_cluster}",
        "TaskDefinition": "${image_processor_arn_2}",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": ${jsonencode(fargateSUB)},
            "SecurityGroups": ${jsonencode(fargateSG)},
            "AssignPublicIp": "ENABLED"
          }
        }
      },
      "ResultPath": "$.crashDetectionResult",
      "Next": "SaveResults"
    },
    "SaveResults": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "Parameters": {
        "Bucket.$": "$.dump_bucket",
        "Key": "results/detection.json",
        "Body": "Detection completed"
      },
      "ResultPath": "$.saveResult",
      "Next": "CheckResultsFiles"
    },
    "CheckResultsFiles": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket.$": "$.dump_bucket",
        "Prefix": "results/"
      },
      "ResultPath": "$.resultsList",
      "Next": "Choice3"
    },
    "Choice3": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.resultsList.Contents",
          "IsPresent": true,
          "Next": "Lambda Invoke"
        }
      ],
      "Default": "FailResults"
    },
    "FailResults": {
      "Type": "Fail",
      "Error": "NoResultsFiles",
      "Cause": "Second stage did not generate results"
    },
    "Lambda Invoke": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${Function1InvokeArns}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Cleanup"
    },
    "Cleanup": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
      "Parameters": {
        "Bucket.$": "$.dump_bucket",
        "Key": "processing/status.txt"
      },
      "End": true
    }
  }
}